syntax = "proto3";

message Slot {
  Address next = 200;
  int32 ID = 201;
  // string IDname = 202;
  uint32 flag = 203;  // one byte. use separate flag bits?
  oneof kind {
    Uninitialized uninitialized = 99; // xs kind = -1?
    Undefined undefined = 100;  // xs kind = 0
    XsNull the_null = 1;
    bool bool = 2;
    int32 integer = 3;
    double number = 4;
    bytes string = 5;
    // STRING_X_KIND = 6
    int32 symbol = 7;
    bytes bigint = 8;
    // BIGINT_X_KIND = 9
  }
}

message Address {
  // as in fxPrintAddress
  // https://github.com/Moddable-OpenSource/moddable/blob/public/xs/tools/xslSlot.c#L808
  //   if ((projection->heap < slot) && (slot < projection->limit)) {
  //     fprintf(file, "(txSlot*)&gxHeap[%d]", (int)projection->indexes[slot - projection->heap]);
  int64 index = 1;
}

message Ibid {
  oneof tag {
    uint32 exit = 1;
    uint32 ibid = 2;
  }
}

message Value {
  message FlagId {
    uint32 flag = 4;  // one byte
    int32 ID = 5;
    bytes IDname = 6; // optional?
  }
  oneof kind2 {
    Scalar scalar = 7;
    XsComplex complex = 8;
  }
}

message Scalar {
  oneof kind {
    Undefined undefined = 100;  // xs kind = 0
    XsNull the_null = 1;
    bool bool = 2;
    int32 integer = 3;
    double number = 4;
    bytes string = 5;
    // STRING_X_KIND = 6
    int32 symbol = 7;
    bytes bigint = 8;
    // BIGINT_X_KIND = 9
  }
}

message Uninitialized {
}

message Undefined {
}

message XsNull {
}

message XsComplex {
  uint32 self = 1;
  oneof kind {
    Reference reference = 10;
    // CLOSURE
    // FRAME
    Instance instance = 13;
    // arguments_sloppy
    // arguments_strict
    Array array = 16;
    // ...TODO?
    Code code = 20;
    // ...
    Accessor accessor = 37;
    // ...
    Home home = 41;
    // ...
    Callback callback = 48;
    // ...
  }
}

message Array {
  uint32 size = 3;
  repeated Slot items = 4;
}

message Reference {
  SlotList instance = 1;
}

message SlotOpt {
  oneof tag {
    None none = 1;
    Slot some = 2;
  }
}

message SlotList {
  oneof tag {
    Nil none = 1;
    SlotList head = 2;
  }
}

message None {
}

message Nil {
}

message Instance {
  // SlotOpt garbage = 1;
  // ItemOpt prototype = 2;
}

message Code {
  bytes code = 1;
  SlotOpt closures = 2;  // ISSUE: SlotList?
}

message Accessor {
  SlotOpt getter = 1;
  SlotOpt setter = 2;
}

message Home {
  SlotOpt object = 1;
  SlotOpt module = 2;
}

message Callback {
  uint64 address = 1;
}
