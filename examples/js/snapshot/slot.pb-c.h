/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: slot.proto */

#ifndef PROTOBUF_C_slot_2eproto__INCLUDED
#define PROTOBUF_C_slot_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _SlotHeap SlotHeap;
typedef struct _Slot Slot;
typedef struct _Address Address;
typedef struct _Module Module;
typedef struct _Table Table;
typedef struct _Ibid Ibid;
typedef struct _Value Value;
typedef struct _Value__FlagId Value__FlagId;
typedef struct _Scalar Scalar;
typedef struct _Uninitialized Uninitialized;
typedef struct _Undefined Undefined;
typedef struct _XsNull XsNull;
typedef struct _XsComplex XsComplex;
typedef struct _Array Array;
typedef struct _Reference Reference;
typedef struct _SlotOpt SlotOpt;
typedef struct _SlotList SlotList;
typedef struct _None None;
typedef struct _Nil Nil;
typedef struct _Instance Instance;
typedef struct _Code Code;
typedef struct _Accessor Accessor;
typedef struct _Home Home;
typedef struct _Callback Callback;


/* --- enums --- */


/* --- messages --- */

struct  _SlotHeap
{
  ProtobufCMessage base;
  size_t n_slot;
  Slot **slot;
};
#define SLOT_HEAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slot_heap__descriptor) \
    , 0,NULL }


typedef enum {
  SLOT__KIND__NOT_SET = 0,
  SLOT__KIND_UNINITIALIZED = 99,
  SLOT__KIND_UNDEFINED = 100,
  SLOT__KIND_THE_NULL = 1,
  SLOT__KIND_BOOL = 2,
  SLOT__KIND_INTEGER = 3,
  SLOT__KIND_NUMBER = 4,
  SLOT__KIND_STRING = 5,
  SLOT__KIND_SYMBOL = 7,
  SLOT__KIND_BIGINT = 8,
  SLOT__KIND_REFERENCE = 10,
  SLOT__KIND_PROTOTYPE = 13,
  SLOT__KIND_GLOBAL = 25,
} Slot__KindCase;

struct  _Slot
{
  ProtobufCMessage base;
  Address *next;
  protobuf_c_boolean has_id;
  int32_t id;
  /*
   * string IDname = 202;
   */
  /*
   * one byte. use separate flag bits?
   */
  protobuf_c_boolean has_flag;
  uint32_t flag;
  Slot__KindCase kind_case;
  union {
    /*
     * xs kind = -1?
     */
    Uninitialized *uninitialized;
    /*
     * xs kind = 0
     */
    Undefined *undefined;
    XsNull *the_null;
    protobuf_c_boolean bool_;
    int32_t integer;
    double number;
    char *string;
    /*
     * STRING_X_KIND = 6
     */
    int32_t symbol;
    ProtobufCBinaryData bigint;
    /*
     * BIGINT_X_KIND = 9
     */
    Address *reference;
    /*
     * 11
     * 12
     */
    /*
     * XS_INSTANCE_KIND
     */
    Address *prototype;
    /*
     * XS_GLOBAL_KIND
     */
    Table *global;
  };
};
#define SLOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slot__descriptor) \
    , NULL, 0,0, 0,0, SLOT__KIND__NOT_SET, {0} }


struct  _Address
{
  ProtobufCMessage base;
  /*
   * as in fxPrintAddress
   * https://github.com/Moddable-OpenSource/moddable/blob/public/xs/tools/xslSlot.c#L808
   *   if ((projection->heap < slot) && (slot < projection->limit)) {
   *     fprintf(file, "(txSlot*)&gxHeap[%d]", (int)projection->indexes[slot - projection->heap]);
   */
  protobuf_c_boolean has_heap;
  int32_t heap;
  protobuf_c_boolean has_index;
  int64_t index;
};
#define ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&address__descriptor) \
    , 0,0, 0,0 }


struct  _Module
{
  ProtobufCMessage base;
  Address *realm;
  protobuf_c_boolean has_id;
  int32_t id;
};
#define MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&module__descriptor) \
    , NULL, 0,0 }


struct  _Table
{
  ProtobufCMessage base;
  size_t n_address;
  Address **address;
};
#define TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table__descriptor) \
    , 0,NULL }


typedef enum {
  IBID__TAG__NOT_SET = 0,
  IBID__TAG_EXIT = 1,
  IBID__TAG_IBID = 2,
} Ibid__TagCase;

struct  _Ibid
{
  ProtobufCMessage base;
  Ibid__TagCase tag_case;
  union {
    uint32_t exit;
    uint32_t ibid;
  };
};
#define IBID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibid__descriptor) \
    , IBID__TAG__NOT_SET, {0} }


struct  _Value__FlagId
{
  ProtobufCMessage base;
  /*
   * one byte
   */
  protobuf_c_boolean has_flag;
  uint32_t flag;
  protobuf_c_boolean has_id;
  int32_t id;
  /*
   * optional?
   */
  protobuf_c_boolean has_idname;
  ProtobufCBinaryData idname;
};
#define VALUE__FLAG_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value__flag_id__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


typedef enum {
  VALUE__KIND2__NOT_SET = 0,
  VALUE__KIND2_SCALAR = 7,
  VALUE__KIND2_COMPLEX = 8,
} Value__Kind2Case;

struct  _Value
{
  ProtobufCMessage base;
  Value__Kind2Case kind2_case;
  union {
    Scalar *scalar;
    XsComplex *complex;
  };
};
#define VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value__descriptor) \
    , VALUE__KIND2__NOT_SET, {0} }


typedef enum {
  SCALAR__KIND__NOT_SET = 0,
  SCALAR__KIND_UNDEFINED = 100,
  SCALAR__KIND_THE_NULL = 1,
  SCALAR__KIND_BOOL = 2,
  SCALAR__KIND_INTEGER = 3,
  SCALAR__KIND_NUMBER = 4,
  SCALAR__KIND_STRING = 5,
  SCALAR__KIND_SYMBOL = 7,
  SCALAR__KIND_BIGINT = 8,
} Scalar__KindCase;

struct  _Scalar
{
  ProtobufCMessage base;
  Scalar__KindCase kind_case;
  union {
    /*
     * xs kind = 0
     */
    Undefined *undefined;
    XsNull *the_null;
    protobuf_c_boolean bool_;
    int32_t integer;
    double number;
    ProtobufCBinaryData string;
    /*
     * STRING_X_KIND = 6
     */
    int32_t symbol;
    /*
     * BIGINT_X_KIND = 9
     */
    ProtobufCBinaryData bigint;
  };
};
#define SCALAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scalar__descriptor) \
    , SCALAR__KIND__NOT_SET, {0} }


struct  _Uninitialized
{
  ProtobufCMessage base;
};
#define UNINITIALIZED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&uninitialized__descriptor) \
     }


struct  _Undefined
{
  ProtobufCMessage base;
};
#define UNDEFINED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&undefined__descriptor) \
     }


struct  _XsNull
{
  ProtobufCMessage base;
};
#define XS_NULL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xs_null__descriptor) \
     }


typedef enum {
  XS_COMPLEX__KIND__NOT_SET = 0,
  XS_COMPLEX__KIND_REFERENCE = 10,
  XS_COMPLEX__KIND_INSTANCE = 13,
  XS_COMPLEX__KIND_ARRAY = 16,
  XS_COMPLEX__KIND_CODE = 20,
  XS_COMPLEX__KIND_ACCESSOR = 37,
  XS_COMPLEX__KIND_HOME = 41,
  XS_COMPLEX__KIND_CALLBACK = 48,
} XsComplex__KindCase;

struct  _XsComplex
{
  ProtobufCMessage base;
  protobuf_c_boolean has_self;
  uint32_t self;
  XsComplex__KindCase kind_case;
  union {
    Reference *reference;
    /*
     * CLOSURE
     * FRAME
     */
    Instance *instance;
    /*
     * arguments_sloppy
     * arguments_strict
     */
    Array *array;
    /*
     * ...TODO?
     */
    Code *code;
    /*
     * ...
     */
    Accessor *accessor;
    /*
     * ...
     */
    Home *home;
    /*
     * ...
     */
    /*
     * ...
     */
    Callback *callback;
  };
};
#define XS_COMPLEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xs_complex__descriptor) \
    , 0,0, XS_COMPLEX__KIND__NOT_SET, {0} }


struct  _Array
{
  ProtobufCMessage base;
  protobuf_c_boolean has_size;
  uint32_t size;
  size_t n_items;
  Slot **items;
};
#define ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&array__descriptor) \
    , 0,0, 0,NULL }


struct  _Reference
{
  ProtobufCMessage base;
  SlotList *instance;
};
#define REFERENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reference__descriptor) \
    , NULL }


typedef enum {
  SLOT_OPT__TAG__NOT_SET = 0,
  SLOT_OPT__TAG_NONE = 1,
  SLOT_OPT__TAG_SOME = 2,
} SlotOpt__TagCase;

struct  _SlotOpt
{
  ProtobufCMessage base;
  SlotOpt__TagCase tag_case;
  union {
    None *none;
    Slot *some;
  };
};
#define SLOT_OPT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slot_opt__descriptor) \
    , SLOT_OPT__TAG__NOT_SET, {0} }


typedef enum {
  SLOT_LIST__TAG__NOT_SET = 0,
  SLOT_LIST__TAG_NONE = 1,
  SLOT_LIST__TAG_HEAD = 2,
} SlotList__TagCase;

struct  _SlotList
{
  ProtobufCMessage base;
  SlotList__TagCase tag_case;
  union {
    Nil *none;
    SlotList *head;
  };
};
#define SLOT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slot_list__descriptor) \
    , SLOT_LIST__TAG__NOT_SET, {0} }


struct  _None
{
  ProtobufCMessage base;
};
#define NONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&none__descriptor) \
     }


struct  _Nil
{
  ProtobufCMessage base;
};
#define NIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nil__descriptor) \
     }


struct  _Instance
{
  ProtobufCMessage base;
};
#define INSTANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&instance__descriptor) \
     }


struct  _Code
{
  ProtobufCMessage base;
  protobuf_c_boolean has_code;
  ProtobufCBinaryData code;
  /*
   * ISSUE: SlotList?
   */
  SlotOpt *closures;
};
#define CODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&code__descriptor) \
    , 0,{0,NULL}, NULL }


struct  _Accessor
{
  ProtobufCMessage base;
  SlotOpt *getter;
  SlotOpt *setter;
};
#define ACCESSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&accessor__descriptor) \
    , NULL, NULL }


struct  _Home
{
  ProtobufCMessage base;
  SlotOpt *object;
  SlotOpt *module;
};
#define HOME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&home__descriptor) \
    , NULL, NULL }


struct  _Callback
{
  ProtobufCMessage base;
  protobuf_c_boolean has_address;
  uint64_t address;
};
#define CALLBACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&callback__descriptor) \
    , 0,0 }


/* SlotHeap methods */
void   slot_heap__init
                     (SlotHeap         *message);
size_t slot_heap__get_packed_size
                     (const SlotHeap   *message);
size_t slot_heap__pack
                     (const SlotHeap   *message,
                      uint8_t             *out);
size_t slot_heap__pack_to_buffer
                     (const SlotHeap   *message,
                      ProtobufCBuffer     *buffer);
SlotHeap *
       slot_heap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slot_heap__free_unpacked
                     (SlotHeap *message,
                      ProtobufCAllocator *allocator);
/* Slot methods */
void   slot__init
                     (Slot         *message);
size_t slot__get_packed_size
                     (const Slot   *message);
size_t slot__pack
                     (const Slot   *message,
                      uint8_t             *out);
size_t slot__pack_to_buffer
                     (const Slot   *message,
                      ProtobufCBuffer     *buffer);
Slot *
       slot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slot__free_unpacked
                     (Slot *message,
                      ProtobufCAllocator *allocator);
/* Address methods */
void   address__init
                     (Address         *message);
size_t address__get_packed_size
                     (const Address   *message);
size_t address__pack
                     (const Address   *message,
                      uint8_t             *out);
size_t address__pack_to_buffer
                     (const Address   *message,
                      ProtobufCBuffer     *buffer);
Address *
       address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   address__free_unpacked
                     (Address *message,
                      ProtobufCAllocator *allocator);
/* Module methods */
void   module__init
                     (Module         *message);
size_t module__get_packed_size
                     (const Module   *message);
size_t module__pack
                     (const Module   *message,
                      uint8_t             *out);
size_t module__pack_to_buffer
                     (const Module   *message,
                      ProtobufCBuffer     *buffer);
Module *
       module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   module__free_unpacked
                     (Module *message,
                      ProtobufCAllocator *allocator);
/* Table methods */
void   table__init
                     (Table         *message);
size_t table__get_packed_size
                     (const Table   *message);
size_t table__pack
                     (const Table   *message,
                      uint8_t             *out);
size_t table__pack_to_buffer
                     (const Table   *message,
                      ProtobufCBuffer     *buffer);
Table *
       table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table__free_unpacked
                     (Table *message,
                      ProtobufCAllocator *allocator);
/* Ibid methods */
void   ibid__init
                     (Ibid         *message);
size_t ibid__get_packed_size
                     (const Ibid   *message);
size_t ibid__pack
                     (const Ibid   *message,
                      uint8_t             *out);
size_t ibid__pack_to_buffer
                     (const Ibid   *message,
                      ProtobufCBuffer     *buffer);
Ibid *
       ibid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibid__free_unpacked
                     (Ibid *message,
                      ProtobufCAllocator *allocator);
/* Value__FlagId methods */
void   value__flag_id__init
                     (Value__FlagId         *message);
/* Value methods */
void   value__init
                     (Value         *message);
size_t value__get_packed_size
                     (const Value   *message);
size_t value__pack
                     (const Value   *message,
                      uint8_t             *out);
size_t value__pack_to_buffer
                     (const Value   *message,
                      ProtobufCBuffer     *buffer);
Value *
       value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value__free_unpacked
                     (Value *message,
                      ProtobufCAllocator *allocator);
/* Scalar methods */
void   scalar__init
                     (Scalar         *message);
size_t scalar__get_packed_size
                     (const Scalar   *message);
size_t scalar__pack
                     (const Scalar   *message,
                      uint8_t             *out);
size_t scalar__pack_to_buffer
                     (const Scalar   *message,
                      ProtobufCBuffer     *buffer);
Scalar *
       scalar__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scalar__free_unpacked
                     (Scalar *message,
                      ProtobufCAllocator *allocator);
/* Uninitialized methods */
void   uninitialized__init
                     (Uninitialized         *message);
size_t uninitialized__get_packed_size
                     (const Uninitialized   *message);
size_t uninitialized__pack
                     (const Uninitialized   *message,
                      uint8_t             *out);
size_t uninitialized__pack_to_buffer
                     (const Uninitialized   *message,
                      ProtobufCBuffer     *buffer);
Uninitialized *
       uninitialized__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   uninitialized__free_unpacked
                     (Uninitialized *message,
                      ProtobufCAllocator *allocator);
/* Undefined methods */
void   undefined__init
                     (Undefined         *message);
size_t undefined__get_packed_size
                     (const Undefined   *message);
size_t undefined__pack
                     (const Undefined   *message,
                      uint8_t             *out);
size_t undefined__pack_to_buffer
                     (const Undefined   *message,
                      ProtobufCBuffer     *buffer);
Undefined *
       undefined__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   undefined__free_unpacked
                     (Undefined *message,
                      ProtobufCAllocator *allocator);
/* XsNull methods */
void   xs_null__init
                     (XsNull         *message);
size_t xs_null__get_packed_size
                     (const XsNull   *message);
size_t xs_null__pack
                     (const XsNull   *message,
                      uint8_t             *out);
size_t xs_null__pack_to_buffer
                     (const XsNull   *message,
                      ProtobufCBuffer     *buffer);
XsNull *
       xs_null__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xs_null__free_unpacked
                     (XsNull *message,
                      ProtobufCAllocator *allocator);
/* XsComplex methods */
void   xs_complex__init
                     (XsComplex         *message);
size_t xs_complex__get_packed_size
                     (const XsComplex   *message);
size_t xs_complex__pack
                     (const XsComplex   *message,
                      uint8_t             *out);
size_t xs_complex__pack_to_buffer
                     (const XsComplex   *message,
                      ProtobufCBuffer     *buffer);
XsComplex *
       xs_complex__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xs_complex__free_unpacked
                     (XsComplex *message,
                      ProtobufCAllocator *allocator);
/* Array methods */
void   array__init
                     (Array         *message);
size_t array__get_packed_size
                     (const Array   *message);
size_t array__pack
                     (const Array   *message,
                      uint8_t             *out);
size_t array__pack_to_buffer
                     (const Array   *message,
                      ProtobufCBuffer     *buffer);
Array *
       array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   array__free_unpacked
                     (Array *message,
                      ProtobufCAllocator *allocator);
/* Reference methods */
void   reference__init
                     (Reference         *message);
size_t reference__get_packed_size
                     (const Reference   *message);
size_t reference__pack
                     (const Reference   *message,
                      uint8_t             *out);
size_t reference__pack_to_buffer
                     (const Reference   *message,
                      ProtobufCBuffer     *buffer);
Reference *
       reference__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reference__free_unpacked
                     (Reference *message,
                      ProtobufCAllocator *allocator);
/* SlotOpt methods */
void   slot_opt__init
                     (SlotOpt         *message);
size_t slot_opt__get_packed_size
                     (const SlotOpt   *message);
size_t slot_opt__pack
                     (const SlotOpt   *message,
                      uint8_t             *out);
size_t slot_opt__pack_to_buffer
                     (const SlotOpt   *message,
                      ProtobufCBuffer     *buffer);
SlotOpt *
       slot_opt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slot_opt__free_unpacked
                     (SlotOpt *message,
                      ProtobufCAllocator *allocator);
/* SlotList methods */
void   slot_list__init
                     (SlotList         *message);
size_t slot_list__get_packed_size
                     (const SlotList   *message);
size_t slot_list__pack
                     (const SlotList   *message,
                      uint8_t             *out);
size_t slot_list__pack_to_buffer
                     (const SlotList   *message,
                      ProtobufCBuffer     *buffer);
SlotList *
       slot_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slot_list__free_unpacked
                     (SlotList *message,
                      ProtobufCAllocator *allocator);
/* None methods */
void   none__init
                     (None         *message);
size_t none__get_packed_size
                     (const None   *message);
size_t none__pack
                     (const None   *message,
                      uint8_t             *out);
size_t none__pack_to_buffer
                     (const None   *message,
                      ProtobufCBuffer     *buffer);
None *
       none__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   none__free_unpacked
                     (None *message,
                      ProtobufCAllocator *allocator);
/* Nil methods */
void   nil__init
                     (Nil         *message);
size_t nil__get_packed_size
                     (const Nil   *message);
size_t nil__pack
                     (const Nil   *message,
                      uint8_t             *out);
size_t nil__pack_to_buffer
                     (const Nil   *message,
                      ProtobufCBuffer     *buffer);
Nil *
       nil__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nil__free_unpacked
                     (Nil *message,
                      ProtobufCAllocator *allocator);
/* Instance methods */
void   instance__init
                     (Instance         *message);
size_t instance__get_packed_size
                     (const Instance   *message);
size_t instance__pack
                     (const Instance   *message,
                      uint8_t             *out);
size_t instance__pack_to_buffer
                     (const Instance   *message,
                      ProtobufCBuffer     *buffer);
Instance *
       instance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   instance__free_unpacked
                     (Instance *message,
                      ProtobufCAllocator *allocator);
/* Code methods */
void   code__init
                     (Code         *message);
size_t code__get_packed_size
                     (const Code   *message);
size_t code__pack
                     (const Code   *message,
                      uint8_t             *out);
size_t code__pack_to_buffer
                     (const Code   *message,
                      ProtobufCBuffer     *buffer);
Code *
       code__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   code__free_unpacked
                     (Code *message,
                      ProtobufCAllocator *allocator);
/* Accessor methods */
void   accessor__init
                     (Accessor         *message);
size_t accessor__get_packed_size
                     (const Accessor   *message);
size_t accessor__pack
                     (const Accessor   *message,
                      uint8_t             *out);
size_t accessor__pack_to_buffer
                     (const Accessor   *message,
                      ProtobufCBuffer     *buffer);
Accessor *
       accessor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   accessor__free_unpacked
                     (Accessor *message,
                      ProtobufCAllocator *allocator);
/* Home methods */
void   home__init
                     (Home         *message);
size_t home__get_packed_size
                     (const Home   *message);
size_t home__pack
                     (const Home   *message,
                      uint8_t             *out);
size_t home__pack_to_buffer
                     (const Home   *message,
                      ProtobufCBuffer     *buffer);
Home *
       home__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   home__free_unpacked
                     (Home *message,
                      ProtobufCAllocator *allocator);
/* Callback methods */
void   callback__init
                     (Callback         *message);
size_t callback__get_packed_size
                     (const Callback   *message);
size_t callback__pack
                     (const Callback   *message,
                      uint8_t             *out);
size_t callback__pack_to_buffer
                     (const Callback   *message,
                      ProtobufCBuffer     *buffer);
Callback *
       callback__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   callback__free_unpacked
                     (Callback *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SlotHeap_Closure)
                 (const SlotHeap *message,
                  void *closure_data);
typedef void (*Slot_Closure)
                 (const Slot *message,
                  void *closure_data);
typedef void (*Address_Closure)
                 (const Address *message,
                  void *closure_data);
typedef void (*Module_Closure)
                 (const Module *message,
                  void *closure_data);
typedef void (*Table_Closure)
                 (const Table *message,
                  void *closure_data);
typedef void (*Ibid_Closure)
                 (const Ibid *message,
                  void *closure_data);
typedef void (*Value__FlagId_Closure)
                 (const Value__FlagId *message,
                  void *closure_data);
typedef void (*Value_Closure)
                 (const Value *message,
                  void *closure_data);
typedef void (*Scalar_Closure)
                 (const Scalar *message,
                  void *closure_data);
typedef void (*Uninitialized_Closure)
                 (const Uninitialized *message,
                  void *closure_data);
typedef void (*Undefined_Closure)
                 (const Undefined *message,
                  void *closure_data);
typedef void (*XsNull_Closure)
                 (const XsNull *message,
                  void *closure_data);
typedef void (*XsComplex_Closure)
                 (const XsComplex *message,
                  void *closure_data);
typedef void (*Array_Closure)
                 (const Array *message,
                  void *closure_data);
typedef void (*Reference_Closure)
                 (const Reference *message,
                  void *closure_data);
typedef void (*SlotOpt_Closure)
                 (const SlotOpt *message,
                  void *closure_data);
typedef void (*SlotList_Closure)
                 (const SlotList *message,
                  void *closure_data);
typedef void (*None_Closure)
                 (const None *message,
                  void *closure_data);
typedef void (*Nil_Closure)
                 (const Nil *message,
                  void *closure_data);
typedef void (*Instance_Closure)
                 (const Instance *message,
                  void *closure_data);
typedef void (*Code_Closure)
                 (const Code *message,
                  void *closure_data);
typedef void (*Accessor_Closure)
                 (const Accessor *message,
                  void *closure_data);
typedef void (*Home_Closure)
                 (const Home *message,
                  void *closure_data);
typedef void (*Callback_Closure)
                 (const Callback *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor slot_heap__descriptor;
extern const ProtobufCMessageDescriptor slot__descriptor;
extern const ProtobufCMessageDescriptor address__descriptor;
extern const ProtobufCMessageDescriptor module__descriptor;
extern const ProtobufCMessageDescriptor table__descriptor;
extern const ProtobufCMessageDescriptor ibid__descriptor;
extern const ProtobufCMessageDescriptor value__descriptor;
extern const ProtobufCMessageDescriptor value__flag_id__descriptor;
extern const ProtobufCMessageDescriptor scalar__descriptor;
extern const ProtobufCMessageDescriptor uninitialized__descriptor;
extern const ProtobufCMessageDescriptor undefined__descriptor;
extern const ProtobufCMessageDescriptor xs_null__descriptor;
extern const ProtobufCMessageDescriptor xs_complex__descriptor;
extern const ProtobufCMessageDescriptor array__descriptor;
extern const ProtobufCMessageDescriptor reference__descriptor;
extern const ProtobufCMessageDescriptor slot_opt__descriptor;
extern const ProtobufCMessageDescriptor slot_list__descriptor;
extern const ProtobufCMessageDescriptor none__descriptor;
extern const ProtobufCMessageDescriptor nil__descriptor;
extern const ProtobufCMessageDescriptor instance__descriptor;
extern const ProtobufCMessageDescriptor code__descriptor;
extern const ProtobufCMessageDescriptor accessor__descriptor;
extern const ProtobufCMessageDescriptor home__descriptor;
extern const ProtobufCMessageDescriptor callback__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_slot_2eproto__INCLUDED */
